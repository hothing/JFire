/**
 * 
 */
package org.nightlabs.jfire.base.ui.prop.edit;

import java.beans.PropertyChangeSupport;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.nightlabs.base.ui.composite.XComposite;
import org.nightlabs.jfire.base.ui.resource.Messages;
import org.nightlabs.jfire.prop.PropertySet;
import org.nightlabs.jfire.prop.dao.StructLocalDAO;
import org.nightlabs.progress.NullProgressMonitor;

/**
 * Composite that can be used when the display name of a {@link PropertySet} should be edited.
 * Instantiate a new Composite and set the {@link PropertySet} whose display name it should
 * edit by {@link #setPropertySet(PropertySet)} or {@link #setPropertySet(PropertySet, boolean)}.
 * 
 * @author Alexander Bieber <!-- alex [AT] nightlabs [DOT] -->
 */
public class DisplayNameEditComposite extends XComposite {

	private PropertySet propertySet;
	
	private boolean updating = false;
	private boolean needsUpdate = false;
	
	private Button autogenerateNameCheckbox;
	private Text displayNameText;
	
	private PropertyChangeSupport propertyChangeSupport;
	
	/**
	 * Constructs a new {@link DisplayNameEditComposite}.
	 * 
	 * @param parent The parent of the Composite.
	 * @param style The style of the Composite.
	 */
	public DisplayNameEditComposite(Composite parent, int style, PropertyChangeSupport propertyChangeSupport) {
		super(parent, style, LayoutMode.ORDINARY_WRAPPER, LayoutDataMode.NONE);
		this.propertyChangeSupport = propertyChangeSupport;
		getGridLayout().numColumns = 2;
		
		Label label = new Label(this, SWT.NONE);
		label.setText(Messages.getString("org.nightlabs.jfire.base.ui.person.edit.blockbased.special.PersonPersonalDataWizardPage.displayName.caption")); //$NON-NLS-1$
		label.setLayoutData(new GridData());
		autogenerateNameCheckbox = new Button(this, SWT.CHECK);
		autogenerateNameCheckbox.setText(Messages.getString("org.nightlabs.jfire.base.ui.person.edit.blockbased.special.PersonPersonalDataWizardPage.autoCreateDisplayName.text")); //$NON-NLS-1$

		autogenerateNameCheckbox.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				displayNameText.setEnabled(!autogenerateNameCheckbox.getSelection());
				getPropertySet().setAutoGenerateDisplayName(autogenerateNameCheckbox.getSelection());
				refresh();
			}
			public void widgetDefaultSelected(SelectionEvent e) {}
		});
//		autogenerateNameCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
		autogenerateNameCheckbox.setLayoutData(new GridData());
		
		displayNameText = new Text(this, XComposite.getBorderStyle(this));
		displayNameText.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				if (!updating) {
					needsUpdate = true;
				}
			}
		});
		displayNameText.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				if (needsUpdate) {
					updatePropertySet();
				}
			}
		});
		
		GridData textGD = new GridData(GridData.FILL_HORIZONTAL);
		textGD.horizontalSpan = 2;
		displayNameText.setLayoutData(textGD);
	}

	public void setPropertySet(PropertySet propertySet) {
		setPropertySet(propertySet, true);
	}
	
	public void setPropertySet(PropertySet propertySet, boolean refresh) {
		this.propertySet = propertySet;
		if (refresh) {
			refresh();
		}
	}
	
	/**
	 * Refreshes the {@link DisplayNameEditComposite} with the value
	 * from the {@link PropertySet} currently set.
	 */
	public void refresh() {
		if (getPropertySet() != null) {
			autogenerateNameCheckbox.setSelection(getPropertySet().isAutoGenerateDisplayName());
			if (getPropertySet().isAutoGenerateDisplayName()) {
				updatePropertySet();
			}
			if (getPropertySet().getDisplayName() != null) {
				displayNameText.setText(getPropertySet().getDisplayName());
			}
		}
		else {
			autogenerateNameCheckbox.setSelection(true);
		}
		displayNameText.setEnabled(!autogenerateNameCheckbox.getSelection());
	}
	
	public PropertySet getPropertySet() {
		return propertySet;
	}
	
	/**
	 * Updates the {@link PropertySet} with the values entered
	 * in this {@link DisplayNameEditComposite}.
	 */
	public void updatePropertySet() {
		updating = true;
		try {
			String oldDisplayName = getPropertySet().getDisplayName();
			getPropertySet().setAutoGenerateDisplayName(autogenerateNameCheckbox.getSelection());
			getPropertySet().setDisplayName(displayNameText.getText(), StructLocalDAO.sharedInstance().getStructLocal(
					getPropertySet().getStructLocalObjectID(),
					//				Organisation.DEV_ORGANISATION_ID,
					//				Person.class, Person.STRUCT_SCOPE, structLocalScope,
					new NullProgressMonitor())
			);
			String newDisplayName = getPropertySet().getDisplayName();
			if (propertyChangeSupport != null) {
				propertyChangeSupport.firePropertyChange(PropertySet.PROP_DISPLAY_NAME, oldDisplayName, newDisplayName);
			}
		} finally {
			updating = false;
		}
		
	}
}
