#
# Java2D for SWT Plugin properties
#
# This file contains translatable resources for the org.holongate.j2d plugin.
#
# (c) 2002, 2004 Holongate.org
# $Revision: 1.3 $
#
plugin.name = Java2D for SWT

#
# Factory extension point related messages
#
factory.installed = installed
factory.failed = not installed (see error log for more informations)
factory.default = No native fragment available for this pplatform

all.factory = SWT Extension (no acceleration)
win32.factory = Windows Native Extension
gtk.factory = Gtk Native Extension
motif.factory = Motif Native Extension

#
# WelcomePreferencePage resources
#
prefs.welcome.name = Java2D Support
prefs.welcome.message = \
Welcome to the Java2D support for Eclipse!\n\n\
You will find in this preference pages some options to improve:\n\n\
- Rendering quality\n\
- Display performance\n\n\
The Holongate.org Team.

#
# RenderingPreferencePage resources
#
prefs.rendering.name = Rendering Hints
prefs.rendering.message = Java2D meets SWT!
prefs.rendering.image = versailles.jpg
prefs.rendering.aa = Use &Anti-aliasing
prefs.rendering.interpolate = Image interpolation method
prefs.rendering.interpolate.bicubic = Bicubic (slowest, best quality)
prefs.rendering.interpolate.bilinear = Bilinear (best compromise)
prefs.rendering.interpolate.neighbour = Nearest neighbour (fastest, lowest quality)

#
# PerformancePreferencePage resources
#
# Each performance level is related to the following properties:
# - prefs.performance.label.X: the label that appear at the corresponding scale tick mark (as short as possible)
# - prefs.performance.text.X: An explanation text detailling what this level of performance is about and what its prominent pros and cons are
#
prefs.performance.name = Performance

prefs.performance.intro = Select the default performance level (may apply to new parts only):

prefs.performance.label.0 = Java2D
prefs.performance.text.0 = \
No special performance improvement, you get the Java2D standard behavior.\n\n\
Average performance is good for small to medium images (your screen size)\n\
displayed at their natural size.\n\
This level has the lowest memory consumption, to be used only when other levels fail.

prefs.performance.label.1 = Optimized (experimental)
prefs.performance.text.1 = \
Improved translations\n\n\
Better performances for image translation under some circumstances,\n\
But redisplay still depends on zoom level. No special memory cost,\n\
but user experience (fluidity) depends on the graphics card capabilities.\n\
Some "jiggles" can appear:\n\
- On slow systems due to some missed events while repainting,\n\
- At some non rational scale due to rounding errors between screen and image coordinates.\n\
- When the image is partially masked / unmasked by another window (the full image is never recomputed after a translation)

prefs.performance.label.2 = Native
prefs.performance.text.2 = \
Maximum performances\n\n\
Real time translation performances at any zoom level.\n\
Comes at a price: high memory consumption for large images / scale factors.\n\
This performance improvement is achieved by creating a "shadow" SWT widget\n\
the size of the transformed image. This is good when a large image is displayed at\n\
a small scale factor, or when a small image is displayed at large scales.\n\
But, in other circumstances, you will create a very large image that can exhaust your\n\
available memory.\n\
This performance level is particularly well suited with non raster images like SVG because\n\
you only pay the cost of the first drawing at a given scale factor.