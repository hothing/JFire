#
# Java2D for SWT Plugin properties
#
# This file contains translatable resources for the org.holongate.j2d plugin.
#
# (c) 2002, 2004 Holongate.org
# $Revision: 1.4 $
#
plugin.name = Java2D pour SWT

#
# Factory extension point related messages
#
factory.installed = installée
factory.failed = non installée (voir la console des erreurs)
factory.default = Pas d'extension native pour cette plate-forme

all.factory = Extension SWT (sans acceleration)
win32.factory = Extension accélérée pour Windows
gtk.factory = Extension accélérée pour Gtk
motif.factory = Extension accélérée pour Motif

#
# WelcomePreferencePage resources
#
prefs.welcome.name = Support de Java2D
prefs.welcome.message = \
Bienvenue dans le support Java2D pour Eclipse!\n\n\
Ces préférences vous permettent:\n\n\
- D'améliorer la qualité d'affichage\n\
- D'optimiser les performances en fonction de votre environnement\n\n\
L'équipe Holongate.org.

#
# RenderingPreferencePage resources
#
prefs.rendering.name = Qualité d'affichage
prefs.rendering.message = Java2D aime SWT!
prefs.rendering.image = versailles.jpg
prefs.rendering.aa = Utiliser l'&anti-crénelage
prefs.rendering.interpolate = Méthode d'interpolation des images
prefs.rendering.interpolate.bicubic = Bicubique (meilleure qualité)
prefs.rendering.interpolate.bilinear = Bilinéaire (meilleur compromis)
prefs.rendering.interpolate.neighbour = Voisinage (faible qualité)

#
# PerformancePreferencePage resources
#
# Each performance level is related to the following properties:
# - prefs.performance.label.X: the label that appear at the corresponding scale tick mark (as short as possible)
# - prefs.performance.text.X: An explanation text detailling what this level of performance is about and what its prominent pros and cons are
#
prefs.performance.name = Performances

prefs.performance.intro = Choisissez le niveau de performance le plus adapté:\n\
(toutes les applications n'honorent pas cette information)

prefs.performance.label.0 = Java2D
prefs.performance.text.0 = \
Pas d'amélioration particulière par rapport à Java2D.\n\n\
La performance est honorable pour les images de petite ou moyenne taille (celle de l'écran) \
affichées à leur définition naturelle (pas de zoom).\n\
Ce niveau est le plus économe en mémoire et doit être choisi lorsque les autres niveaux \
ne permettent pas d'afficher l'image.

prefs.performance.label.1 = Optimisé (expérimental)
prefs.performance.text.1 = \
Amélioration des translations\n\n\
Permet d'améliorer sensiblement les performances lors des translations, \
mais la vitesse d'afichage dépend toujours du niveau de zoom.\n\
Pas de surcoût mémoire particulier, la fluidité des déplacements dépend de la plate-forme (cpu + carte graphique).\n\
Quelques défauts d'affichages peuvent être visibles:\n\
- sur les systèmes "lents" qui ne permettent pas d'honorer toutes les demandes d'affichage,\n\
- lors de l'affichage à des échelles non rationelles pour lesquelles des erreurs d'arrondis \
se produisent entre l'écran et la portion d'image recalculée,\n\
- lorsque l'image est partiellement masquée / démasquée (elle n'est jamais complètement recalculée).

prefs.performance.label.2 = Maximale
prefs.performance.text.2 = \
Performances maximales\n\n\
Les translations s'opèrent à la vitese maximale quelque soit le niveau de zoom.\n\
Le prix à payer étant une consommation mémoire proportionnelle à la taille de l'image.\n\
A chaque transformation, une image complète (de la taille d'affichage finale) est calculée.\n\
Les résultats sont intéressant pour les grandes images affichées à de petites échelles, ou de petites images affichées à de grandes échelles.\n\
Dans les autres cas, la création de très grandes images peut rapidement consommer toute la mémoire disponible.\n\
Ce niveau de performances est particulièrement utile pour les images vectorielles telles que celles produites à partir de SVG \
parce que seul le temps de calcul initial est vu par l'utilisateur.
